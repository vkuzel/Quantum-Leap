/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.admin.tables;


import cz.quantumleap.admin.Admin;
import cz.quantumleap.admin.Keys;
import cz.quantumleap.admin.tables.records.NotificationRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotificationTable extends TableImpl<NotificationRecord> {

    private static final long serialVersionUID = -123610709;

    /**
     * The reference instance of <code>admin.notification</code>
     */
    public static final NotificationTable NOTIFICATION = new NotificationTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * The column <code>admin.notification.id</code>.
     */
    public final TableField<NotificationRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('admin.notification_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>admin.notification.code</code>.
     */
    public final TableField<NotificationRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>admin.notification.message_arguments</code>.
     */
    public final TableField<NotificationRecord, String[]> MESSAGE_ARGUMENTS = createField(DSL.name("message_arguments"), org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>admin.notification.person_id</code>.
     */
    public final TableField<NotificationRecord, Long> PERSON_ID = createField(DSL.name("person_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>admin.notification.role_id</code>.
     */
    public final TableField<NotificationRecord, Long> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>admin.notification.created_at</code>.
     */
    public final TableField<NotificationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>admin.notification.resolved_at</code>.
     */
    public final TableField<NotificationRecord, LocalDateTime> RESOLVED_AT = createField(DSL.name("resolved_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>admin.notification.resolved_by</code>.
     */
    public final TableField<NotificationRecord, Long> RESOLVED_BY = createField(DSL.name("resolved_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>admin.notification</code> table reference
     */
    public NotificationTable() {
        this(DSL.name("notification"), null);
    }

    /**
     * Create an aliased <code>admin.notification</code> table reference
     */
    public NotificationTable(String alias) {
        this(DSL.name(alias), NOTIFICATION);
    }

    /**
     * Create an aliased <code>admin.notification</code> table reference
     */
    public NotificationTable(Name alias) {
        this(alias, NOTIFICATION);
    }

    private NotificationTable(Name alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotificationTable(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> NotificationTable(Table<O> child, ForeignKey<O, NotificationRecord> key) {
        super(child, key, NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return Admin.ADMIN;
    }

    @Override
    public Identity<NotificationRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTIFICATION;
    }

    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_PKEY;
    }

    @Override
    public List<UniqueKey<NotificationRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationRecord>>asList(Keys.NOTIFICATION_PKEY);
    }

    @Override
    public NotificationTable as(String alias) {
        return new NotificationTable(DSL.name(alias), this);
    }

    @Override
    public NotificationTable as(Name alias) {
        return new NotificationTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTable rename(String name) {
        return new NotificationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTable rename(Name name) {
        return new NotificationTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String[], Long, Long, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
