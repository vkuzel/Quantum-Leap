/*
 * This file is generated by jOOQ.
*/
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.Indexes;
import cz.quantumleap.core.Keys;
import cz.quantumleap.core.tables.records.RoleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleTable extends TableImpl<RoleRecord> {

    private static final long serialVersionUID = -138193406;

    /**
     * The reference instance of <code>core.role</code>
     */
    public static final RoleTable ROLE = new RoleTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleRecord> getRecordType() {
        return RoleRecord.class;
    }

    /**
     * The column <code>core.role.id</code>.
     */
    public final TableField<RoleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('core.role_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>core.role.name</code>.
     */
    public final TableField<RoleRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>core.role</code> table reference
     */
    public RoleTable() {
        this(DSL.name("role"), null);
    }

    /**
     * Create an aliased <code>core.role</code> table reference
     */
    public RoleTable(String alias) {
        this(DSL.name(alias), ROLE);
    }

    /**
     * Create an aliased <code>core.role</code> table reference
     */
    public RoleTable(Name alias) {
        this(alias, ROLE);
    }

    private RoleTable(Name alias, Table<RoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoleTable(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Core.CORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROLE_NAME_KEY, Indexes.ROLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RoleRecord, Long> getIdentity() {
        return Keys.IDENTITY_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoleRecord> getPrimaryKey() {
        return Keys.ROLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoleRecord>> getKeys() {
        return Arrays.<UniqueKey<RoleRecord>>asList(Keys.ROLE_PKEY, Keys.ROLE_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleTable as(String alias) {
        return new RoleTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoleTable as(Name alias) {
        return new RoleTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTable rename(String name) {
        return new RoleTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleTable rename(Name name) {
        return new RoleTable(name, null);
    }
}
