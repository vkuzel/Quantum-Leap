/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.Keys;
import cz.quantumleap.core.tables.records.PersonRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonTable extends TableImpl<PersonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.person</code>
     */
    public static final PersonTable PERSON = new PersonTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonRecord> getRecordType() {
        return PersonRecord.class;
    }

    /**
     * The column <code>core.person.id</code>.
     */
    public final TableField<PersonRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>core.person.email</code>.
     */
    public final TableField<PersonRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>core.person.name</code>.
     */
    public final TableField<PersonRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>core.person.created_at</code>.
     */
    public final TableField<PersonRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private PersonTable(Name alias, Table<PersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonTable(Name alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>core.person</code> table reference
     */
    public PersonTable(String alias) {
        this(DSL.name(alias), PERSON);
    }

    /**
     * Create an aliased <code>core.person</code> table reference
     */
    public PersonTable(Name alias) {
        this(alias, PERSON);
    }

    /**
     * Create a <code>core.person</code> table reference
     */
    public PersonTable() {
        this(DSL.name("person"), null);
    }

    public <O extends Record> PersonTable(Table<O> child, ForeignKey<O, PersonRecord> key) {
        super(child, key, PERSON);
    }

    @Override
    public Schema getSchema() {
        return Core.CORE;
    }

    @Override
    public Identity<PersonRecord, Long> getIdentity() {
        return (Identity<PersonRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PersonRecord> getPrimaryKey() {
        return Keys.PERSON_PKEY;
    }

    @Override
    public List<UniqueKey<PersonRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonRecord>>asList(Keys.PERSON_PKEY, Keys.PERSON_EMAIL_KEY);
    }

    @Override
    public PersonTable as(String alias) {
        return new PersonTable(DSL.name(alias), this);
    }

    @Override
    public PersonTable as(Name alias) {
        return new PersonTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTable rename(String name) {
        return new PersonTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonTable rename(Name name) {
        return new PersonTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
