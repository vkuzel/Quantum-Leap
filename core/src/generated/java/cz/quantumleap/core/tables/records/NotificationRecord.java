/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables.records;


import cz.quantumleap.core.tables.NotificationTable;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationRecord extends UpdatableRecordImpl<NotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>core.notification.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>core.notification.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>core.notification.code</code>.
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>core.notification.code</code>.
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>core.notification.message_arguments</code>.
     */
    public void setMessageArguments(String[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>core.notification.message_arguments</code>.
     */
    public String[] getMessageArguments() {
        return (String[]) get(2);
    }

    /**
     * Setter for <code>core.notification.person_id</code>.
     */
    public void setPersonId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>core.notification.person_id</code>.
     */
    public Long getPersonId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>core.notification.role_id</code>.
     */
    public void setRoleId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>core.notification.role_id</code>.
     */
    public Long getRoleId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>core.notification.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>core.notification.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>core.notification.resolved_at</code>.
     */
    public void setResolvedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>core.notification.resolved_at</code>.
     */
    public LocalDateTime getResolvedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>core.notification.resolved_by</code>.
     */
    public void setResolvedBy(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>core.notification.resolved_by</code>.
     */
    public Long getResolvedBy() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotificationRecord
     */
    public NotificationRecord() {
        super(NotificationTable.NOTIFICATION);
    }

    /**
     * Create a detached, initialised NotificationRecord
     */
    public NotificationRecord(Long id, String code, String[] messageArguments, Long personId, Long roleId, LocalDateTime createdAt, LocalDateTime resolvedAt, Long resolvedBy) {
        super(NotificationTable.NOTIFICATION);

        setId(id);
        setCode(code);
        setMessageArguments(messageArguments);
        setPersonId(personId);
        setRoleId(roleId);
        setCreatedAt(createdAt);
        setResolvedAt(resolvedAt);
        setResolvedBy(resolvedBy);
        resetChangedOnNotNull();
    }
}
