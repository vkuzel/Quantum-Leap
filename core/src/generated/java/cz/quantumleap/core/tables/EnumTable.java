/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.Keys;
import cz.quantumleap.core.tables.records.EnumRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EnumTable extends TableImpl<EnumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.enum</code>
     */
    public static final EnumTable ENUM = new EnumTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnumRecord> getRecordType() {
        return EnumRecord.class;
    }

    /**
     * The column <code>core.enum.id</code>.
     */
    public final TableField<EnumRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>core.enum.name</code>.
     */
    public final TableField<EnumRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private EnumTable(Name alias, Table<EnumRecord> aliased) {
        this(alias, aliased, null);
    }

    private EnumTable(Name alias, Table<EnumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>core.enum</code> table reference
     */
    public EnumTable(String alias) {
        this(DSL.name(alias), ENUM);
    }

    /**
     * Create an aliased <code>core.enum</code> table reference
     */
    public EnumTable(Name alias) {
        this(alias, ENUM);
    }

    /**
     * Create a <code>core.enum</code> table reference
     */
    public EnumTable() {
        this(DSL.name("enum"), null);
    }

    public <O extends Record> EnumTable(Table<O> child, ForeignKey<O, EnumRecord> key) {
        super(child, key, ENUM);
    }

    @Override
    public Schema getSchema() {
        return Core.CORE;
    }

    @Override
    public UniqueKey<EnumRecord> getPrimaryKey() {
        return Keys.ENUM_PKEY;
    }

    @Override
    public List<UniqueKey<EnumRecord>> getKeys() {
        return Arrays.<UniqueKey<EnumRecord>>asList(Keys.ENUM_PKEY);
    }

    @Override
    public EnumTable as(String alias) {
        return new EnumTable(DSL.name(alias), this);
    }

    @Override
    public EnumTable as(Name alias) {
        return new EnumTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EnumTable rename(String name) {
        return new EnumTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnumTable rename(Name name) {
        return new EnumTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
