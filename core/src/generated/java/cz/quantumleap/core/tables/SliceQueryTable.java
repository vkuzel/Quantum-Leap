/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.Keys;
import cz.quantumleap.core.tables.records.SliceQueryRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SliceQueryTable extends TableImpl<SliceQueryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.slice_query</code>
     */
    public static final SliceQueryTable SLICE_QUERY = new SliceQueryTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SliceQueryRecord> getRecordType() {
        return SliceQueryRecord.class;
    }

    /**
     * The column <code>core.slice_query.id</code>.
     */
    public final TableField<SliceQueryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>core.slice_query.entity_identifier</code>.
     */
    public final TableField<SliceQueryRecord, String> ENTITY_IDENTIFIER = createField(DSL.name("entity_identifier"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>core.slice_query.person_id</code>.
     */
    public final TableField<SliceQueryRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.slice_query.is_default</code>.
     */
    public final TableField<SliceQueryRecord, Boolean> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>core.slice_query.name</code>.
     */
    public final TableField<SliceQueryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>core.slice_query.query</code>.
     */
    public final TableField<SliceQueryRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.VARCHAR.nullable(false), this, "");

    private SliceQueryTable(Name alias, Table<SliceQueryRecord> aliased) {
        this(alias, aliased, null);
    }

    private SliceQueryTable(Name alias, Table<SliceQueryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>core.slice_query</code> table reference
     */
    public SliceQueryTable(String alias) {
        this(DSL.name(alias), SLICE_QUERY);
    }

    /**
     * Create an aliased <code>core.slice_query</code> table reference
     */
    public SliceQueryTable(Name alias) {
        this(alias, SLICE_QUERY);
    }

    /**
     * Create a <code>core.slice_query</code> table reference
     */
    public SliceQueryTable() {
        this(DSL.name("slice_query"), null);
    }

    public <O extends Record> SliceQueryTable(Table<O> child, ForeignKey<O, SliceQueryRecord> key) {
        super(child, key, SLICE_QUERY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public Identity<SliceQueryRecord, Long> getIdentity() {
        return (Identity<SliceQueryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SliceQueryRecord> getPrimaryKey() {
        return Keys.SLICE_QUERY_PKEY;
    }

    @Override
    public List<UniqueKey<SliceQueryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SLICE_QUERY_ENTITY_IDENTIFIER_PERSON_ID_IS_DEFAULT_KEY);
    }

    @Override
    public List<ForeignKey<SliceQueryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SLICE_QUERY__SLICE_QUERY_PERSON_ID_FKEY);
    }

    private transient PersonTable _person;

    /**
     * Get the implicit join path to the <code>core.person</code> table.
     */
    public PersonTable person() {
        if (_person == null)
            _person = new PersonTable(this, Keys.SLICE_QUERY__SLICE_QUERY_PERSON_ID_FKEY);

        return _person;
    }

    @Override
    public SliceQueryTable as(String alias) {
        return new SliceQueryTable(DSL.name(alias), this);
    }

    @Override
    public SliceQueryTable as(Name alias) {
        return new SliceQueryTable(alias, this);
    }

    @Override
    public SliceQueryTable as(Table<?> alias) {
        return new SliceQueryTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SliceQueryTable rename(String name) {
        return new SliceQueryTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SliceQueryTable rename(Name name) {
        return new SliceQueryTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SliceQueryTable rename(Table<?> name) {
        return new SliceQueryTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, Boolean, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Long, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Long, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
