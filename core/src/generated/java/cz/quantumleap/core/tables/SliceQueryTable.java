/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.Keys;
import cz.quantumleap.core.tables.PersonTable.PersonPath;
import cz.quantumleap.core.tables.records.SliceQueryRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SliceQueryTable extends TableImpl<SliceQueryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.slice_query</code>
     */
    public static final SliceQueryTable SLICE_QUERY = new SliceQueryTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SliceQueryRecord> getRecordType() {
        return SliceQueryRecord.class;
    }

    /**
     * The column <code>core.slice_query.id</code>.
     */
    public final TableField<SliceQueryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>core.slice_query.entity_identifier</code>.
     */
    public final TableField<SliceQueryRecord, String> ENTITY_IDENTIFIER = createField(DSL.name("entity_identifier"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>core.slice_query.person_id</code>.
     */
    public final TableField<SliceQueryRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.slice_query.is_default</code>.
     */
    public final TableField<SliceQueryRecord, Boolean> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>core.slice_query.name</code>.
     */
    public final TableField<SliceQueryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>core.slice_query.query</code>.
     */
    public final TableField<SliceQueryRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.VARCHAR.nullable(false), this, "");

    private SliceQueryTable(Name alias, Table<SliceQueryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SliceQueryTable(Name alias, Table<SliceQueryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.slice_query</code> table reference
     */
    public SliceQueryTable(String alias) {
        this(DSL.name(alias), SLICE_QUERY);
    }

    /**
     * Create an aliased <code>core.slice_query</code> table reference
     */
    public SliceQueryTable(Name alias) {
        this(alias, SLICE_QUERY);
    }

    /**
     * Create a <code>core.slice_query</code> table reference
     */
    public SliceQueryTable() {
        this(DSL.name("slice_query"), null);
    }

    public <O extends Record> SliceQueryTable(Table<O> path, ForeignKey<O, SliceQueryRecord> childPath, InverseForeignKey<O, SliceQueryRecord> parentPath) {
        super(path, childPath, parentPath, SLICE_QUERY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SliceQueryPath extends SliceQueryTable implements Path<SliceQueryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SliceQueryPath(Table<O> path, ForeignKey<O, SliceQueryRecord> childPath, InverseForeignKey<O, SliceQueryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SliceQueryPath(Name alias, Table<SliceQueryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SliceQueryPath as(String alias) {
            return new SliceQueryPath(DSL.name(alias), this);
        }

        @Override
        public SliceQueryPath as(Name alias) {
            return new SliceQueryPath(alias, this);
        }

        @Override
        public SliceQueryPath as(Table<?> alias) {
            return new SliceQueryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public Identity<SliceQueryRecord, Long> getIdentity() {
        return (Identity<SliceQueryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SliceQueryRecord> getPrimaryKey() {
        return Keys.SLICE_QUERY_PKEY;
    }

    @Override
    public List<UniqueKey<SliceQueryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SLICE_QUERY_ENTITY_IDENTIFIER_PERSON_ID_IS_DEFAULT_KEY);
    }

    @Override
    public List<ForeignKey<SliceQueryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SLICE_QUERY__SLICE_QUERY_PERSON_ID_FKEY);
    }

    private transient PersonPath _person;

    /**
     * Get the implicit join path to the <code>core.person</code> table.
     */
    public PersonPath person() {
        if (_person == null)
            _person = new PersonPath(this, Keys.SLICE_QUERY__SLICE_QUERY_PERSON_ID_FKEY, null);

        return _person;
    }

    @Override
    public SliceQueryTable as(String alias) {
        return new SliceQueryTable(DSL.name(alias), this);
    }

    @Override
    public SliceQueryTable as(Name alias) {
        return new SliceQueryTable(alias, this);
    }

    @Override
    public SliceQueryTable as(Table<?> alias) {
        return new SliceQueryTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SliceQueryTable rename(String name) {
        return new SliceQueryTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SliceQueryTable rename(Name name) {
        return new SliceQueryTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SliceQueryTable rename(Table<?> name) {
        return new SliceQueryTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SliceQueryTable where(Condition condition) {
        return new SliceQueryTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SliceQueryTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SliceQueryTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SliceQueryTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SliceQueryTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SliceQueryTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SliceQueryTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SliceQueryTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SliceQueryTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SliceQueryTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
