/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.tables.records.GenerateIntervalsRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GenerateIntervalsTable extends TableImpl<GenerateIntervalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.generate_intervals</code>
     */
    public static final GenerateIntervalsTable GENERATE_INTERVALS = new GenerateIntervalsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenerateIntervalsRecord> getRecordType() {
        return GenerateIntervalsRecord.class;
    }

    /**
     * The column <code>core.generate_intervals.interval_start</code>.
     */
    public final TableField<GenerateIntervalsRecord, LocalDateTime> INTERVAL_START = createField(DSL.name("interval_start"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.generate_intervals.interval_end</code>.
     */
    public final TableField<GenerateIntervalsRecord, LocalDateTime> INTERVAL_END = createField(DSL.name("interval_end"), SQLDataType.LOCALDATETIME(6), this, "");

    private GenerateIntervalsTable(Name alias, Table<GenerateIntervalsRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.LOCALDATE),
            DSL.val(null, SQLDataType.LOCALDATE),
            DSL.val(null, SQLDataType.VARCHAR),
            DSL.val(null, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)))
        });
    }

    private GenerateIntervalsTable(Name alias, Table<GenerateIntervalsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private GenerateIntervalsTable(Name alias, Table<GenerateIntervalsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>core.generate_intervals</code> table reference
     */
    public GenerateIntervalsTable(String alias) {
        this(DSL.name(alias), GENERATE_INTERVALS);
    }

    /**
     * Create an aliased <code>core.generate_intervals</code> table reference
     */
    public GenerateIntervalsTable(Name alias) {
        this(alias, GENERATE_INTERVALS);
    }

    /**
     * Create a <code>core.generate_intervals</code> table reference
     */
    public GenerateIntervalsTable() {
        this(DSL.name("generate_intervals"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public GenerateIntervalsTable as(String alias) {
        return new GenerateIntervalsTable(DSL.name(alias), this, parameters);
    }

    @Override
    public GenerateIntervalsTable as(Name alias) {
        return new GenerateIntervalsTable(alias, this, parameters);
    }

    @Override
    public GenerateIntervalsTable as(Table<?> alias) {
        return new GenerateIntervalsTable(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateIntervalsTable rename(String name) {
        return new GenerateIntervalsTable(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateIntervalsTable rename(Name name) {
        return new GenerateIntervalsTable(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateIntervalsTable rename(Table<?> name) {
        return new GenerateIntervalsTable(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GenerateIntervalsTable call(
          LocalDate intervalsStart
        , LocalDate intervalsEnd
        , String step
        , Boolean openEnd
    ) {
        GenerateIntervalsTable result = new GenerateIntervalsTable(DSL.name("generate_intervals"), null, new Field[] {
            DSL.val(intervalsStart, SQLDataType.LOCALDATE),
            DSL.val(intervalsEnd, SQLDataType.LOCALDATE),
            DSL.val(step, SQLDataType.VARCHAR),
            DSL.val(openEnd, SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GenerateIntervalsTable call(
          Field<LocalDate> intervalsStart
        , Field<LocalDate> intervalsEnd
        , Field<String> step
        , Field<Boolean> openEnd
    ) {
        GenerateIntervalsTable result = new GenerateIntervalsTable(DSL.name("generate_intervals"), null, new Field[] {
            intervalsStart,
            intervalsEnd,
            step,
            openEnd
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
