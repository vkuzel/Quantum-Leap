/*
 * This file is generated by jOOQ.
 */
package cz.quantumleap.core.tables;


import cz.quantumleap.core.Core;
import cz.quantumleap.core.Keys;
import cz.quantumleap.core.tables.PersonTable.PersonPath;
import cz.quantumleap.core.tables.RoleTable.RolePath;
import cz.quantumleap.core.tables.records.NotificationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationTable extends TableImpl<NotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.notification</code>
     */
    public static final NotificationTable NOTIFICATION = new NotificationTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * The column <code>core.notification.id</code>.
     */
    public final TableField<NotificationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>core.notification.code</code>.
     */
    public final TableField<NotificationRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>core.notification.message_arguments</code>.
     */
    public final TableField<NotificationRecord, String[]> MESSAGE_ARGUMENTS = createField(DSL.name("message_arguments"), SQLDataType.VARCHAR.nullable(false).array(), this, "");

    /**
     * The column <code>core.notification.person_id</code>.
     */
    public final TableField<NotificationRecord, Long> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.notification.role_id</code>.
     */
    public final TableField<NotificationRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>core.notification.created_at</code>.
     */
    public final TableField<NotificationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>core.notification.resolved_at</code>.
     */
    public final TableField<NotificationRecord, LocalDateTime> RESOLVED_AT = createField(DSL.name("resolved_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>core.notification.resolved_by</code>.
     */
    public final TableField<NotificationRecord, Long> RESOLVED_BY = createField(DSL.name("resolved_by"), SQLDataType.BIGINT, this, "");

    private NotificationTable(Name alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationTable(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>core.notification</code> table reference
     */
    public NotificationTable(String alias) {
        this(DSL.name(alias), NOTIFICATION);
    }

    /**
     * Create an aliased <code>core.notification</code> table reference
     */
    public NotificationTable(Name alias) {
        this(alias, NOTIFICATION);
    }

    /**
     * Create a <code>core.notification</code> table reference
     */
    public NotificationTable() {
        this(DSL.name("notification"), null);
    }

    public <O extends Record> NotificationTable(Table<O> path, ForeignKey<O, NotificationRecord> childPath, InverseForeignKey<O, NotificationRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationPath extends NotificationTable implements Path<NotificationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NotificationPath(Table<O> path, ForeignKey<O, NotificationRecord> childPath, InverseForeignKey<O, NotificationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationPath(Name alias, Table<NotificationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationPath as(String alias) {
            return new NotificationPath(DSL.name(alias), this);
        }

        @Override
        public NotificationPath as(Name alias) {
            return new NotificationPath(alias, this);
        }

        @Override
        public NotificationPath as(Table<?> alias) {
            return new NotificationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public Identity<NotificationRecord, Long> getIdentity() {
        return (Identity<NotificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_PKEY;
    }

    @Override
    public List<ForeignKey<NotificationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATION__NOTIFICATION_PERSON_ID_FKEY, Keys.NOTIFICATION__NOTIFICATION_RESOLVED_BY_FKEY, Keys.NOTIFICATION__NOTIFICATION_ROLE_ID_FKEY);
    }

    private transient PersonPath _notificationPersonIdFkey;

    /**
     * Get the implicit join path to the <code>core.person</code> table, via the
     * <code>notification_person_id_fkey</code> key.
     */
    public PersonPath notificationPersonIdFkey() {
        if (_notificationPersonIdFkey == null)
            _notificationPersonIdFkey = new PersonPath(this, Keys.NOTIFICATION__NOTIFICATION_PERSON_ID_FKEY, null);

        return _notificationPersonIdFkey;
    }

    private transient PersonPath _notificationResolvedByFkey;

    /**
     * Get the implicit join path to the <code>core.person</code> table, via the
     * <code>notification_resolved_by_fkey</code> key.
     */
    public PersonPath notificationResolvedByFkey() {
        if (_notificationResolvedByFkey == null)
            _notificationResolvedByFkey = new PersonPath(this, Keys.NOTIFICATION__NOTIFICATION_RESOLVED_BY_FKEY, null);

        return _notificationResolvedByFkey;
    }

    private transient RolePath _role;

    /**
     * Get the implicit join path to the <code>core.role</code> table.
     */
    public RolePath role() {
        if (_role == null)
            _role = new RolePath(this, Keys.NOTIFICATION__NOTIFICATION_ROLE_ID_FKEY, null);

        return _role;
    }

    @Override
    public NotificationTable as(String alias) {
        return new NotificationTable(DSL.name(alias), this);
    }

    @Override
    public NotificationTable as(Name alias) {
        return new NotificationTable(alias, this);
    }

    @Override
    public NotificationTable as(Table<?> alias) {
        return new NotificationTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTable rename(String name) {
        return new NotificationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTable rename(Name name) {
        return new NotificationTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationTable rename(Table<?> name) {
        return new NotificationTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTable where(Condition condition) {
        return new NotificationTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
