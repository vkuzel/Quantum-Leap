package cz.quantumleap.core.data.entity;

import cz.quantumleap.DefaultCatalog;
import cz.quantumleap.core.data.mapper.MapperUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;

import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EntityIdentifier<TABLE extends Table<? extends Record>> {

    private static final Pattern ENTITY_IDENTIFIER_PATTERN = Pattern.compile("^([^.]+)\\.([^#]+)(#.+)?$");

    private final TABLE table;
    private final String qualifier;

    public EntityIdentifier(TABLE table, String qualifier) {
        this.table = table;
        this.qualifier = qualifier;
    }

    public static <TABLE extends Table<? extends Record>> EntityIdentifier<TABLE> forTable(TABLE table) {
        return forTableWithQualifier(table, null);
    }

    public static <TABLE extends Table<? extends Record>> EntityIdentifier<TABLE> forTableWithQualifier(TABLE table, String qualifier) {
        return new EntityIdentifier<>(table, qualifier);
    }

    public TABLE getTable() {
        return table;
    }

    public String getQualifier() {
        return qualifier;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        EntityIdentifier<?> that = (EntityIdentifier<?>) o;
        return table.equals(that.table) &&
                Objects.equals(qualifier, that.qualifier);
    }

    @Override
    public int hashCode() {
        return Objects.hash(table, qualifier);
    }

    /**
     * Outputs this identifier as a string which can be parsed by parse method
     * to recreate the object.
     */
    @Override
    public String toString() {
        String value = MapperUtils.resolveDatabaseTableNameWithSchema(table);
        if (StringUtils.isNotBlank(qualifier)) {
            value += '#' + qualifier;
        }
        return value;
    }

    /**
     * Parse entity identifier from a string generated by toString method.
     */
    public static EntityIdentifier parse(CharSequence text) {
        Matcher matcher = ENTITY_IDENTIFIER_PATTERN.matcher(text);

        if (!matcher.matches()) {
            throw new IllegalArgumentException("Cannot parse " + text + " to EntityIdentifier!");
        }

        String schemaName = matcher.group(1);
        String tableName = matcher.group(2);
        String qualifier = matcher.group(3) != null ? matcher.group(3).substring(1) : null;

        DefaultCatalog defaultCatalog = DefaultCatalog.DEFAULT_CATALOG;
        Schema schema = defaultCatalog.getSchema(schemaName);
        Validate.notNull(schema, "Schema " + schemaName + " not found!");
        Table<?> table = schema.getTable(tableName);
        Validate.notNull(table, "Table " + tableName + " not found!");
        return EntityIdentifier.forTableWithQualifier(table, qualifier);
    }
}
